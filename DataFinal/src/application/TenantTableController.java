package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class TenantTableController implements Initializable {
	
	@FXML
	private TableView<Tenant> table_tenant;
	@FXML
	private Button HOME_BTN;
	@FXML
	private Button AddTenenant;
	@FXML
	private Button Taxes_btn;
	@FXML
	private Button logOut_btn;
	@FXML
	private AnchorPane home;
	@FXML
	private Label totalH;
	@FXML
	private Label KEYH;
	@FXML
	private Label AgeH;
	@FXML
	private AnchorPane AddButton;
	@FXML
	private TableColumn<Tenant,String> TIDCol;
	@FXML
	private TableColumn<Tenant,String> Tnamecol;
	@FXML
	private TableColumn<Tenant,String> AccCol;
	@FXML
	private TableColumn<Tenant,String> phonecol;
	@FXML
	private TableColumn<Tenant,String> WTcol;
	@FXML
	private TableColumn<Tenant,String> WPcol;
	@FXML
	private TableColumn<Tenant,String> sidcol;
	@FXML
	private TableColumn<Tenant,String> deptcol;
	@FXML
	private TableColumn<Tenant,Integer> agecol;
	@FXML
	private TextField TID;
	@FXML
	private TextField TN;
	@FXML
	private TextField AC;
	@FXML
	private TextField TF;
	@FXML
	private TextField WT;
	@FXML
	private TextField WP;
	@FXML
	private TextField AGE;
	@FXML
	private TextField searchField;
	@FXML
	private Button updatebtn;
	@FXML
	private Button clearbtn;
	@FXML
	private Button ADDbtn;
	@FXML
	private Button deletebtn;
	
    private Parent root;
	ObservableList <Tenant> listM;  // List that serves as the data source for your TableView
	ObservableList <Tenant> dataList;
	
	int index = -1;
   Connection conn = null;
   ResultSet rs = null;
   PreparedStatement pst = null;

	// Event Listener on Button[#HOME_BTN].onAction
	@FXML
	public void HOME_BTN(ActionEvent event) throws IOException {
		
		 FXMLLoader loader = new FXMLLoader(getClass().getResource("Main2.fxml"));
		 Parent root = loader.load();
		    
		    // Set the root as the new scene
		    this.root = root;
		    
		    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		    Scene scene = new Scene(root);
		    stage.setScene(scene);
		    stage.show();
	}
	
	// Event Listener on Button[#AddTenenant].onAction
	@FXML
	public void AddT(ActionEvent event) {
	
		
	}
	// Event Listener on Button[#Taxes_btn].onAction
	@FXML
	public void Taxes(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#logOut_btn].onAction
	@FXML
	public void logout(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("MainScene.fxml"));
	    Parent root = loader.load();
	    
	    // Set the root as the new scene
	    this.root = root;
	    
	    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	    Scene scene = new Scene(root);
	    stage.setScene(scene);
	    stage.show();
	}
	// Event Listener on Button[#updatebtn].onAction
	@FXML
	public void updatebtn(ActionEvent event) {
        try {
            conn = mysqlconnect.getConnection();
            String value1 = TID.getText();
            String value2 = TN.getText();
            String value3 = AC.getText();
            String value4 = TF.getText();
            String value5 = WT.getText();
            String value6 = WP.getText();
            String sql = "UPDATE Tenant SET Tid = '" + value1 + "', Tname = '" + value2 + "', Accruedpayments = '" +
            	    value3 + "', Tphone = '" + value4 + "', worktype = '" + value5 + "', Workplace = '" + value6 +
            	    "' WHERE TID = '" + value1 + "'";

            pst= conn.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(null, "Update");
            updateTable();
          
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
	}
	// Event Listener on Button[#clearbtn].onAction
	@FXML
	public void clearbtn(ActionEvent event) {
		TID.clear();
		TN.clear();
		TF.clear();
		AC.clear();
		WP.clear();
		WT.clear();
		AGE.clear();
		searchField.clear();
	}
	// Event Listener on Button[#ADDbtn].onAction
	@FXML
	public void ADDbtn(ActionEvent event) {
		conn = mysqlconnect.getConnection();
		String sql = "insert into Tenant (Tid,Tname,Tphone,WorkPlace,workType,age,sID)values(?,?,?,?,?,?,?) ";
		
		try {
			//The index passed as the first argument corresponds to the position of the question mark in the SQL query.
			pst= conn.prepareStatement(sql);
			pst.setString(1,TID.getText());
			pst.setString(2,TN.getText());
			pst.setString(3,TF.getText());
			pst.setString(4,WP.getText());
			pst.setString(5,WT.getText());
			pst.setString(6,AGE.getText());
			
			//Generate random number for sposor id
			Random random = new Random();
	        int randomNumber = random.nextInt(90) + 10; // Generates a random number between 10 and 99
	        
	        String randomId = "S" + String.format("%02d", randomNumber); // Formats the number with leading zeros if necessary
	        String num = "S01";
	        pst.setString(7,num);
			pst.executeUpdate();  //pst.executeUpdate() method is called to execute the SQL statement to insert a new row into your MySQL database table based on the values you provided.
			

	        // Refresh the TableView after adding the user
	       // listM = mysqlconnect.getDataTenant();     
	        listM= getDataTenant();                ////getDataTenant() method retrieves the updated data from the database.
			table_tenant.setItems(listM);
			
			JOptionPane.showMessageDialog(null, "Tenat Added successfully");

	     

		} catch (Exception e) {
			
			 JOptionPane.showMessageDialog(null, e);
		}
	}
	// Event Listener on Button[#deletebtn].onAction
	@FXML
	public void deletebtn(ActionEvent event) {
		   conn = mysqlconnect.getConnection();
		    String sql = "delete from Tenant where Tid = ?";
		        try {
		            pst = conn.prepareStatement(sql);
		            pst.setString(1, TID.getText());
		            pst.executeUpdate();
		            JOptionPane.showMessageDialog(null, "Delete");
		            updateTable();
		        } catch (Exception e) {
		            JOptionPane.showMessageDialog(null, e);
		        }
		
	}
	
	
	public void updateTable() {

		TIDCol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Tid"));
		Tnamecol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Tname"));
		AccCol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Accruedpayments"));
		phonecol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Tphone"));
		WPcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("workPlace"));
        WTcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("workType"));
        sidcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("sId"));
        deptcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("deptsID"));
        agecol.setCellValueFactory(new PropertyValueFactory<Tenant,Integer>("age"));
        
      //Note that the strings inside PropertyValueFactory are case-sensitive and must match the property names exactly as they are defined in the Tenant class.
        
        
          listM = getDataTenant();
          table_tenant.setItems(listM);
		
	}
	
	public static ObservableList<Tenant> getDataTenant(){
		Connection conn = mysqlconnect.getConnection();
		ObservableList<Tenant> list = FXCollections.observableArrayList();  //This list will store the retrieved data
		try {
			PreparedStatement ps =  conn.prepareStatement("select * from Tenant");  //Prepares a SQL statement using a PreparedStatement object
            ResultSet rs = ps.executeQuery();      // Executes the SQL statement using executeQuery(), which returns a ResultSet containing the retrieved data.
            
            //In the rs.getString() method, you need to specify the column name in workBench or the column index from which you want to retrieve the data.
            
            while(rs.next()){
                list.add(new Tenant(rs.getString("Tid"), rs.getString("Tname"), rs.getString("Accruedpayments"), rs.getString("Tphone"),  rs.getString("WorkPlace"), rs.getString("workType"), rs.getString("sId"),rs.getString("deptsID"),Integer.parseInt(rs.getString("age"))));
           //extracts the values for each column of a row.
            }
           
			
		 } catch (Exception e) {
		        e.printStackTrace();
		    } finally {
		        try {
		            if (conn != null) {
		                conn.close();
		            }
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		    }
		return list;
		
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		updateTable();
		
		
	} 
	@FXML
    void search_tenant() {          
        TIDCol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Tid"));
        Tnamecol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Tname"));
        AccCol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Accruedpayments"));
        phonecol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("Tphone"));
        WTcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("workType"));
        WPcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("workPlace"));
        sidcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("sId"));
        deptcol.setCellValueFactory(new PropertyValueFactory<Tenant,String>("deptsID"));
        agecol.setCellValueFactory(new PropertyValueFactory<Tenant,Integer>("age"));
        
        dataList = getDataTenant();
        table_tenant.setItems(dataList);
        FilteredList<Tenant> filteredData = new FilteredList<>(dataList, b -> true);  
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
     filteredData.setPredicate(person -> {
    if (newValue == null || newValue.isEmpty()) {
     return true;
    }    
    String lowerCaseFilter = newValue.toLowerCase();
    
    if (person.getTid().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
     return true; // Filter matches username
    } else if (person.getTname().toLowerCase().indexOf(lowerCaseFilter) != -1) {
     return true; // Filter matches password
    }else if (person.getTphone().toLowerCase().indexOf(lowerCaseFilter) != -1) {
     return true; // Filter matches password
    }
    else if (person.getWorkPlace().toLowerCase().indexOf(lowerCaseFilter) != -1)
         return true;// Filter matches email
    else if (person.getWorkType().toLowerCase().indexOf(lowerCaseFilter) != -1)
        return true;// Filter matches email
    else if (String.valueOf(person. getAge()).indexOf(lowerCaseFilter)!=-1)
        return true;// Filter matches email
                                
         else  
          return false; // Does not match.
   });
  });  
  SortedList<Tenant> sortedData = new SortedList<>(filteredData);  
  sortedData.comparatorProperty().bind(table_tenant.comparatorProperty());  
  table_tenant.setItems(sortedData);      
    }
	
	   @FXML
	    void getSelected (MouseEvent event){
	    index = table_tenant.getSelectionModel().getSelectedIndex();
	    if (index <= -1){
	    
	        return;
	    }
	    TID.setText(TIDCol.getCellData(index).toString());
	    TN.setText(Tnamecol.getCellData(index).toString());
	    AC.setText(AccCol.getCellData(index).toString());
	    TF.setText(phonecol.getCellData(index).toString());
	    WT.setText(WTcol.getCellData(index).toString());
	    WP.setText(WPcol.getCellData(index).toString());
	    AGE.setText(String.valueOf(agecol.getCellData(index)));
	    
	    
	    
	    }

	
}

