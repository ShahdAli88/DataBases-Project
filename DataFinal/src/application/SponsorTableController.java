package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class SponsorTableController implements Initializable {
	
	@FXML
	private TableView<Sponsor> table_Sponsor;
	@FXML
	private Button HOME_BTN;
	@FXML
	private Button AddSponser;
	@FXML
	private Button Taxes_btn;
	@FXML
	private Button logOut_btn;
	@FXML
	private AnchorPane AddButton;
	@FXML
	private TableColumn <Sponsor,String> S_ID_COL;
	@FXML
	private TableColumn <Sponsor,String> SnameCOL;
	@FXML
	private TableColumn <Sponsor,String> SphoneCol;
	@FXML
	private TextField search_S;
	@FXML
	private TextField SID;
	@FXML
	private TextField Sname;
	@FXML
	private TextField Sphone;
	@FXML
	private Button updatebtn;
	@FXML
	private Button clearbtn;
	@FXML
	private Button ADDbtnC;
	@FXML
	private Button deletebtn;
	
	
	private Parent root;
    ObservableList<Sponsor> listM;  // List that serves as the data source for your TableView
	ObservableList <Sponsor> dataList;
		
    int index = -1;
    Connection conn = null;
    ResultSet rs = null;
	PreparedStatement pst = null;

	// Event Listener on Button[#HOME_BTN].onAction
	@FXML
	public void HOME_BTN(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("Main2.fxml"));
		 Parent root = loader.load();
		    
		    // Set the root as the new scene
		    this.root = root;
		    
		    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		    Scene scene = new Scene(root);
		    stage.setScene(scene);
		    stage.show();
	}
	// Event Listener on Button[#AddTenenant].onAction
	@FXML
	public void AddT(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#Taxes_btn].onAction
	@FXML
	public void Taxes(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#logOut_btn].onAction
	@FXML
	public void logout(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("MainScene.fxml"));
	    Parent root = loader.load();
	    
	    // Set the root as the new scene
	    this.root = root;
	    
	    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	    Scene scene = new Scene(root);
	    stage.setScene(scene);
	    stage.show();
	}
	// Event Listener on TextField[#search_c].onAction
	@FXML
	public void SearchC(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#updatebtn].onAction
	@FXML
	public void updatebtnC(ActionEvent event) {
		 try {
	            conn = mysqlconnect.getConnection();
	            String value1 = SID.getText();
	            String value2 = Sname.getText();
	            String value3 = Sphone.getText();
	            
	            String sql = "UPDATE Sponsor SET Sid = '" + value1 + "', Sname = '" + value2 + "', Sphone = '" +
	            	    "' WHERE Sid = '" + value1 + "'";


	            pst= conn.prepareStatement(sql);
	            pst.execute();
	            JOptionPane.showMessageDialog(null, "Update");
	            updateTable();
	          
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(null, e);
	        }
	}
	// Event Listener on Button[#clearbtn].onAction
	@FXML
	public void clearbtnC(ActionEvent event) {
		SID.clear();
		Sname.clear();
		Sphone.clear();
		
	}
	// Event Listener on Button[#ADDbtnC].onAction
	@FXML
	public void ADDbtnContact(ActionEvent event) {
       
			
		try {
			//The index passed as the first argument corresponds to the position of the question mark in the SQL query.
			conn = mysqlconnect.getConnection();
			String sql = "INSERT INTO Sponsor (Sid,Sname,Sphone)values(?,?,?) ";
			pst= conn.prepareStatement(sql);
			
			pst.setString(1,SID.getText());
			pst.setString(2,Sname.getText());
			pst.setString(3,Sphone.getText());		
			
			pst.executeUpdate();
	            
	        listM= getDataSponsor();                ////getDataSponsor() method retrieves the updated data from the database.
			table_Sponsor.setItems(listM);
			
			JOptionPane.showMessageDialog(null, "Added successfully");

		} catch (Exception e) {	
			 JOptionPane.showMessageDialog(null, e);
		}
	}
	// Event Listener on Button[#deletebtn].onAction
	@FXML
	public void deletebtnC(ActionEvent event) {
		conn = mysqlconnect.getConnection();
	    String sql = "delete from Sponsor where Sid = ?";
	        try {
	            pst = conn.prepareStatement(sql);
	            pst.setString(1, SID.getText());
	            pst.executeUpdate();
	            JOptionPane.showMessageDialog(null, "Delete");
	            updateTable();
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(null, e);
	        }
	}
	
	
	public void updateTable() {

		S_ID_COL.setCellValueFactory(new PropertyValueFactory<Sponsor,String>("Sid"));
		SnameCOL.setCellValueFactory(new PropertyValueFactory<Sponsor,String>("Sname"));
		SphoneCol.setCellValueFactory(new PropertyValueFactory<Sponsor,String>("Sphone"));
	
        
      //Note that the strings inside PropertyValueFactory are case-sensitive and must match the property names exactly as they are defined in the Sponsor class.
        
          listM = getDataSponsor();
          table_Sponsor.setItems(listM);
		
	}
	
	public static ObservableList<Sponsor> getDataSponsor(){
		Connection conn = mysqlconnect.getConnection();
		ObservableList<Sponsor> list = FXCollections.observableArrayList();  //This list will store the retrieved data
		try {
			PreparedStatement ps =  conn.prepareStatement("select * from Sponsor");  //Prepares a SQL statement using a PreparedStatement object
            ResultSet rs = ps.executeQuery();      // Executes the SQL statement using executeQuery(), which returns a ResultSet containing the retrieved data.
            
            //In the rs.getString() method, you need to specify the column name in workBench or the column index from which you want to retrieve the data.
            
            while(rs.next()){
                list.add(new Sponsor(rs.getString("Sid"),rs.getString("Sname"),  rs.getString("Sphone")));
           //extracts the values for each column of a row.
            }
           
			
		 } catch (Exception e) {
		        e.printStackTrace();
		    } finally {
		        try {
		            if (conn != null) {
		                conn.close();
		            }
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		    }
		return list;
		
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		updateTable();
		
	} 
	
	@FXML
    void search_Sponsor() {          
		S_ID_COL.setCellValueFactory(new PropertyValueFactory<Sponsor,String>("Sid"));
		SnameCOL.setCellValueFactory(new PropertyValueFactory<Sponsor,String>("Sname"));
        SphoneCol.setCellValueFactory(new PropertyValueFactory<Sponsor,String>("Sphone"));
   
        dataList = getDataSponsor();
        table_Sponsor.setItems(dataList);
        FilteredList<Sponsor> filteredData = new FilteredList<>(dataList, b -> true);  
        search_S.textProperty().addListener((observable, oldValue, newValue) -> {
     filteredData.setPredicate(person -> {
    if (newValue == null || newValue.isEmpty()) {
     return true;
    }    
    String lowerCaseFilter = newValue.toLowerCase();
    
    if (person.getSid().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
     return true; // Filter matches username
    } else if (person.getSname().toLowerCase().indexOf(lowerCaseFilter) != -1) {
     return true; // Filter matches password
    }
     else if (person.getSphone().toLowerCase().indexOf(lowerCaseFilter) != -1) {
         return true; // Filter matches password
        }
    
                                
         else  
          return false; // Does not match.
   });
  });  
  SortedList<Sponsor> sortedData = new SortedList<>(filteredData);  
  sortedData.comparatorProperty().bind(table_Sponsor.comparatorProperty());  
  table_Sponsor.setItems(sortedData);      
    }
	
	   @FXML
	    void getSelected (MouseEvent event){
	    index = table_Sponsor.getSelectionModel().getSelectedIndex();
	    if (index <= -1){
	    
	        return;
	    }
	    SID.setText(S_ID_COL.getCellData(index).toString());
	    Sname.setText(SnameCOL.getCellData(index).toString());
	    Sphone.setText(SphoneCol.getCellData(index).toString());
	   
	    }
}

