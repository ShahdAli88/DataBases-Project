 package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class EmpTableController implements Initializable{
	@FXML
	private Button HOME_BTN;
	@FXML
	private Button New_Employee;
	@FXML
	private Button logOut_btn;
	@FXML
	private AnchorPane AddButton;
	@FXML
	private TableView <Emp> tableVeiw;
	@FXML
	private TableColumn <Emp,String> E_ID_COL;
	@FXML
	private TableColumn <Emp,String> P_IDCOL;
	@FXML
	private TableColumn <Emp,String> EnameCol;
	@FXML
	private TableColumn <Emp,String> EphoneCol;
	@FXML
	private TextField search_E;
	@FXML
	private TextField Ename;
	@FXML
	private Button updatebtn;
	@FXML
	private Button clearbtn;
	@FXML
	private Button ADDbtn;
	@FXML
	private Button deletebtn;
	@FXML
	private TextField Ephone;
	@FXML
	private TextField PID;
	
	@FXML
	private TextField EID;

	private Parent root;
	ObservableList <Emp> listM;  // List that serves as the data source for your TableView
	ObservableList <Emp> dataList;
	
	int index = -1;
   Connection conn = null;
   ResultSet rs = null;
   PreparedStatement pst = null;
	// Event Listener on Button[#HOME_BTN].onAction
	@FXML
	public void HOME_BTN(ActionEvent event) throws IOException 
	{
		FXMLLoader loader = new FXMLLoader(getClass().getResource("Main2.fxml"));
		 Parent root = loader.load();
		    
		    // Set the root as the new scene
		    this.root = root;
		    
		    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		    Scene scene = new Scene(root);
		    stage.setScene(scene);
		    stage.show();
	}
	
	// Event Listener on Button[#New_Employee].onAction
	@FXML
	public void New_Employee_btn(ActionEvent event)
	{
		// TODO Autogenerated
	}
	// Event Listener on Button[#logOut_btn].onAction
	
	
	@FXML
	public void logout(ActionEvent event) throws IOException
	{
		FXMLLoader loader = new FXMLLoader(getClass().getResource("MainScene.fxml"));
	    Parent root = loader.load();
	    
	    // Set the root as the new scene
	    this.root = root;
	    
	    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	    Scene scene = new Scene(root);
	    stage.setScene(scene);
	    stage.show();
	}
	
	
	// Event Listener on TextField[#search_E].onAction
	@FXML
	public void SearchE(ActionEvent event) 
	{
		E_ID_COL.setCellValueFactory(new PropertyValueFactory <Emp,String>("eid"));
		P_IDCOL.setCellValueFactory(new PropertyValueFactory <Emp,String>("pID"));
		EnameCol.setCellValueFactory(new PropertyValueFactory <Emp,String>("ename"));
		EphoneCol.setCellValueFactory(new PropertyValueFactory <Emp,String>("phoneE"));
		
		dataList = getDataEmp();
        tableVeiw.setItems(dataList);
        FilteredList<Emp> filteredData = new FilteredList<>(dataList, b -> true);  
        search_E.textProperty().addListener((observable, oldValue, newValue) -> {
     filteredData.setPredicate(person -> {
    if (newValue == null || newValue.isEmpty()) {
     return true;
    }    
    String lowerCaseFilter = newValue.toLowerCase();
    
    if (person.getEid().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
     return true; // Filter matches username
    } else if (person.geteName().toLowerCase().indexOf(lowerCaseFilter) != -1) {
     return true; // Filter matches password
    }
    else if (person.getPhoneE().toLowerCase().indexOf(lowerCaseFilter) != -1)
         return true;// Filter matches email
   
    
                                
         else  
          return false; // Does not match.
   });
  });  
  SortedList<Emp> sortedData = new SortedList<>(filteredData);  
  sortedData.comparatorProperty().bind(tableVeiw.comparatorProperty());  
  tableVeiw.setItems(sortedData);
	}
	
	
	
	 @FXML
	    void getSelected (MouseEvent event){
	    index = tableVeiw.getSelectionModel().getSelectedIndex();
	    if (index <= -1){
	    
	        return;
	    }
	    EID.setText(E_ID_COL.getCellData(index).toString());
	    PID.setText(P_IDCOL.getCellData(index).toString());
	    Ephone.setText(EphoneCol.getCellData(index).toString());
	    Ename.setText(EnameCol.getCellData(index).toString());
	    
	    
	    
	    }	
	
	// Event Listener on Button[#updatebtn].onAction
	
	
	@FXML
	public void updatebtnE(ActionEvent event)
	{
		 try {
	            conn = mysqlconnect.getConnection();
	            String value1 = Ename.getText();
	            String value2 = Ephone.getText();
	            String value3 = PID.getText();
	            String value4 = EID.getText();
	            String sql = "UPDATE EMP SET Ename = '" + value1 + "', Ephone = '" + value2 + "', PID = '" +
	            	    value3   +  "', EID = '"  +value4+
	            	    "' WHERE EID = '" + value4 + "'";

	            pst= conn.prepareStatement(sql);
	            pst.execute();
	            JOptionPane.showMessageDialog(null, "Update");
	            updateTableE();
	          
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(null, e);
	        }
	}
	
	
	public void updateTableE() {

		E_ID_COL.setCellValueFactory(new PropertyValueFactory <Emp,String>("eid"));
		P_IDCOL.setCellValueFactory(new PropertyValueFactory <Emp,String>("pID"));
		EnameCol.setCellValueFactory(new PropertyValueFactory <Emp,String>("ename"));
		EphoneCol.setCellValueFactory(new PropertyValueFactory <Emp,String>("phoneE"));
		
        
      //Note that the strings inside PropertyValueFactory are case-sensitive and must match the property names exactly as they are defined in the Emp class.
        
        
          listM = getDataEmp();
          tableVeiw.setItems(listM);
		
	}
	
	public static ObservableList<Emp> getDataEmp(){
		Connection conn = mysqlconnect.getConnection();
		ObservableList<Emp> list = FXCollections.observableArrayList();  //This list will store the retrieved data
		try {
			PreparedStatement ps =  conn.prepareStatement("select * from Emp");  //Prepares a SQL statement using a PreparedStatement object
            ResultSet rs = ps.executeQuery();      // Executes the SQL statement using executeQuery(), which returns a ResultSet containing the retrieved data.
            
            //In the rs.getString() method, you need to specify the column name in workBench or the column index from which you want to retrieve the data.
            
            while(rs.next()){
                list.add(new Emp(rs.getString("eid"), rs.getString("pID"), rs.getString("ename"), rs.getString("phoneE")));
           //extracts the values for each column of a row.
            }
           
			
		 } catch (Exception e) {
		        e.printStackTrace();
		    } finally {
		        try {
		            if (conn != null) {
		                conn.close();
		            }
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		    }
		return list;
		
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		updateTableE();
	}
	
	
	// Event Listener on Button[#clearbtn].onAction
	@FXML
	public void clearbtnE(ActionEvent event)
	{
		Ename.clear();
        Ephone.clear();
        PID.clear();
        EID.clear();
        search_E.clear();
	}
	
	
	// Event Listener on Button[#ADDbtn].onAction
	@FXML
	public void ADDbtnEmp(ActionEvent event)
	{
		conn = mysqlconnect.getConnection();
		String sql = "insert into Emp (eid,eName,pID,phoneE,)values(?,?,?,?) ";
		
		try {
			//The index passed as the first argument corresponds to the position of the question mark in the SQL query.
			pst= conn.prepareStatement(sql);
			pst.setString(1,EID.getText());
			pst.setString(2,Ename.getText());
			pst.setString(3,PID.getText());
			pst.setString(4,Ephone.getText());
			
			
			//Generate random number for sposor id
			Random random = new Random();
	        int randomNumber = random.nextInt(90) + 10; // Generates a random number between 10 and 99
	        
	        String randomId = "S" + String.format("%02d", randomNumber); // Formats the number with leading zeros if necessary
	        String num = "S01";
	        pst.setString(7,num);
			pst.executeUpdate();  //pst.executeUpdate() method is called to execute the SQL statement to insert a new row into your MySQL database table based on the values you provided.
			

	        // Refresh the TableView after adding the user
	       // listM = mysqlconnect.getDataEmp();     
	        listM= getDataEmp();                ////getDataEmp() method retrieves the updated data from the database.
	        tableVeiw.setItems(listM);
			
			JOptionPane.showMessageDialog(null, "Tenat Added successfully");

	     

		} catch (Exception e) {
			
			 JOptionPane.showMessageDialog(null, e);
		}
	}
	
	
	// Event Listener on Button[#deletebtn].onAction
	@FXML
	public void deletebtnE(ActionEvent event)
	{
		 conn = mysqlconnect.getConnection();
		    String sql = "delete from Emp where Tid = ?";
		        try {
		            pst = conn.prepareStatement(sql);
		            pst.setString(1, EID.getText());
		            pst.executeUpdate();
		            JOptionPane.showMessageDialog(null, "Delete");
		            updateTableE();
		        } catch (Exception e) {
		            JOptionPane.showMessageDialog(null, e);
		        }
		
	}
}
