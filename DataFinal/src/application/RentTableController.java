package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class RentTableController implements Initializable {
	
	@FXML
	private TableView<Rent> table_Rent;
	@FXML
	private Button HOME_BTN;
	@FXML
	private Button AddTenenant;
	@FXML
	private Button logOut_btn;
	@FXML
	private AnchorPane AddButton;
	@FXML
	private TableColumn<Rent,String> R_ID_COL;
	@FXML
	private TableColumn<Rent,String> P_IDCOL;
	@FXML
	private TableColumn<Rent,Integer> MontlyRentCol;
	@FXML
	private TableColumn <Rent,Integer>YearlyRentCOL;
	@FXML
	private TableColumn <Rent,String>TaxCol;
	@FXML
	private TextField search_c;
	@FXML
	private TextField MontlyRent;
	@FXML
	private TextField RID;
	@FXML
	private Button updatebtn;
	@FXML
	private Button clearbtn;
	@FXML
	private Button ADDbtnC;
	@FXML
	private Button deletebtn;
	@FXML
	private TextField YearlyRent;
	@FXML
	private TextField Tax;
    @FXML
    private Button querybtn;
	
	private Parent root;
    ObservableList <Rent> listM;  // List that serves as the data source for your TableView
	ObservableList <Rent> dataList;
		
    int index = -1;
    Connection conn = null;
    ResultSet rs = null;
	PreparedStatement pst = null;

	// Event Listener on Button[#HOME_BTN].onAction
	@FXML
	public void HOME_BTN(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("Main2.fxml"));
		 Parent root = loader.load();
		    
		    // Set the root as the new scene
		    this.root = root;
		    
		    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		    Scene scene = new Scene(root);
		    stage.setScene(scene);
		    stage.show();
	}
	// Event Listener on Button[#AddTenenant].onAction
	@FXML
	public void AddT(ActionEvent event) {
	
		
	}	
	// Event Listener on Button[#logOut_btn].onAction
	@FXML
	public void logout(ActionEvent event) throws IOException {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("MainScene.fxml"));
	    Parent root = loader.load();
	    
	    // Set the root as the new scene
	    this.root = root;
	    
	    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	    Scene scene = new Scene(root);
	    stage.setScene(scene);
	    stage.show();
	}
	// Event Listener on TextField[#search_c].onAction
	@FXML
	public void SearchC(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#updatebtn].onAction
	@FXML
	public void updatebtnC(ActionEvent event) {
		  try {
	            conn = mysqlconnect.getConnection();
	            String value1 = RID.getText();
	            String value2 = MontlyRent.getText();
	            String value3 = YearlyRent.getText();
	            String value4 = Tax.getText();
	            
	            String sql = "UPDATE Rent SET RID = '" + value1 + "', MontlyRent = '" + value2 + "', YearlyRent = '" +
	            	    value3 + "', Tax = '" + value4 + 
	            	    "' WHERE RId = '" + value1 + "'";

 
	            pst= conn.prepareStatement(sql);
	            pst.execute();
	            JOptionPane.showMessageDialog(null, "Update");
	            updateTable();
	          
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(null, e);
	        }
	}
	// Event Listener on Button[#clearbtn].onAction
	@FXML
	public void clearbtnC(ActionEvent event) {
		MontlyRent.clear();
		YearlyRent.clear();
		Tax.clear();
		search_c.clear();
	}
	// Event Listener on Button[#ADDbtnC].onAction
	@FXML
	public void ADDbtnRent(ActionEvent event) {
		conn = mysqlconnect.getConnection();
		
		
		try {
			//The index passed as the first argument corresponds to the position of the question mark in the SQL query.
		    pst.setString(1,RID.getText());
			pst.setString(2,MontlyRent.getText());
			pst.setString(3,YearlyRent.getText());
			pst.setString(4,Tax.getText());
			pst.setString(5, "R100");
		    
			
			String sql = "INSERT INTO Rent (RId,monthlyRent,yearlyRent,Tax,pID)values(?,?,?,?,?) ";
			pst= conn.prepareStatement(sql);
			pst.executeUpdate();
	            
	        listM= getDataRent();                ////getDataRent() method retrieves the updated data from the database.
			table_Rent.setItems(listM);
			
			JOptionPane.showMessageDialog(null, "Added successfully");

		} catch (Exception e) {	
			 JOptionPane.showMessageDialog(null, e);
		}
	
	}
	// Event Listener on Button[#deletebtn].onAction
	@FXML
	public void deletebtnC(ActionEvent event) {
		   conn = mysqlconnect.getConnection();
		    String sql = "delete from Rent where RId = ?";
		        try {
		            pst = conn.prepareStatement(sql);
		            pst.setString(1, RID.getText());
		            pst.executeUpdate();
		            JOptionPane.showMessageDialog(null, "Delete");
		            updateTable();
		        } catch (Exception e) {
		            JOptionPane.showMessageDialog(null, e);
		        }
	}
	
	public void updateTable() {

		R_ID_COL.setCellValueFactory(new PropertyValueFactory<Rent,String>("RId"));
		P_IDCOL.setCellValueFactory(new PropertyValueFactory<Rent,String>("pID"));
		MontlyRentCol.setCellValueFactory(new PropertyValueFactory<Rent,Integer>("montlyRent"));
		YearlyRentCOL.setCellValueFactory(new PropertyValueFactory<Rent,Integer>("yearlyRent"));
		TaxCol.setCellValueFactory(new PropertyValueFactory<Rent,String>("Tax"));
        
        
      //Note that the strings inside PropertyValueFactory are case-sensitive and must match the property names exactly as they are defined in the Rent class.
        
          listM = getDataRent();
          table_Rent.setItems(listM);
		
	}
	
	public static ObservableList<Rent> getDataRent(){
		Connection conn = mysqlconnect.getConnection();
		ObservableList<Rent> list = FXCollections.observableArrayList();  //This list will store the retrieved data
		try {
			PreparedStatement ps =  conn.prepareStatement("select * from Rent");  //Prepares a SQL statement using a PreparedStatement object
            ResultSet rs = ps.executeQuery();      // Executes the SQL statement using executeQuery(), which returns a ResultSet containing the retrieved data.
            
            //In the rs.getString() method, you need to specify the column name in workBench or the column index from which you want to retrieve the data.
            
            while(rs.next()){
                list.add(new Rent(rs.getString("RId"), Integer.parseInt(rs.getString("montlyRent")),Integer.parseInt(rs.getString("yearlyRent")) , rs.getString("Tax"),  rs.getString("pID")));
           //extracts the values for each column of a row.
            }
           
			
		 } catch (Exception e) {
		        e.printStackTrace();
		    } finally {
		        try {
		            if (conn != null) {
		                conn.close();
		            }
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		    }
		return list;
		
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		updateTable();
		
	} 
	
	@FXML
    void search_Rent() {          
		R_ID_COL.setCellValueFactory(new PropertyValueFactory<Rent,String>("RId"));
        P_IDCOL.setCellValueFactory(new PropertyValueFactory<Rent,String>("pID"));
        MontlyRentCol.setCellValueFactory(new PropertyValueFactory<Rent,Integer>("montlyRent"));
        YearlyRentCOL.setCellValueFactory(new PropertyValueFactory<Rent,Integer>("yearlyRent"));
        TaxCol.setCellValueFactory(new PropertyValueFactory<Rent,String>("Tax"));
       
        dataList = getDataRent();
        table_Rent.setItems(dataList);
        FilteredList<Rent> filteredData = new FilteredList<>(dataList, b -> true);  
        search_c.textProperty().addListener((observable, oldValue, newValue) -> {
     filteredData.setPredicate(person -> {
    if (newValue == null || newValue.isEmpty()) {
     return true;
    }    
    String lowerCaseFilter = newValue.toLowerCase();
    
    if (person.getRId().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
     return true; // Filter matches username
    } else if (person.getPID().toLowerCase().indexOf(lowerCaseFilter) != -1) {
     return true; // Filter matches password
    }else if (String.valueOf(person.getYearlyRent()).indexOf(lowerCaseFilter)!=-1)  {
     return true; // Filter matches password
    }
    else if (String.valueOf(person.getYearlyRent()).indexOf(lowerCaseFilter)!=-1)
         return true;// Filter matches email
    else if (person.getTax().toLowerCase().indexOf(lowerCaseFilter) != -1 )
        return true;// Filter matches email
                                
         else  
          return false; // Does not match.
   });
  });  
  SortedList<Rent> sortedData = new SortedList<>(filteredData);  
  sortedData.comparatorProperty().bind(table_Rent.comparatorProperty());  
  table_Rent.setItems(sortedData);      
    }
	
	   @FXML
	    void getSelected (MouseEvent event){
	    index = table_Rent.getSelectionModel().getSelectedIndex();
	    if (index <= -1){
	    
	        return;
	    }
	    RID.setText(R_ID_COL.getCellData(index).toString());
	    //TN.setText(P_IDCOL.getCellData(index).toString());
	    MontlyRent.setText(MontlyRentCol.getCellData(index).toString());
	    YearlyRent.setText(YearlyRentCOL.getCellData(index).toString());
	    Tax.setText(TaxCol.getCellData(index).toString());
	    
	    
	    }
	   
	   @FXML
	    void rentQuery(ActionEvent event) throws IOException {
		   FXMLLoader loader = new FXMLLoader(getClass().getResource("QueryRent.fxml"));
		    Parent root = loader.load();
		    
		    // Set the root as the new scene
		    this.root = root;
		    
		    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		    Scene scene = new Scene(root);
		    stage.setScene(scene);
		    stage.show();

	    }
		/*conn = mysqlconnect.getConnection();
		try {
			
			String sql = "SELECT p.property_id, p.property_name FROM property_table p"
					+ " JOIN rent_table r ON p.property_id = r.property_id "
					+ "ORDER BY r.monthly_rent ASC, r.yearly_rent ASC";
			
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);	     
			StringBuilder result = new StringBuilder();		     
			  while (rs.next()) {
                    String propertyName = rs.getString("property_name");
                    result.append(propertyName).append("\n");
                }
            //    resultLabel.setText(result.toString());		    
			
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e);
		}*/

	
	
}
 