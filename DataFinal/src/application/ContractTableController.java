package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Random;
import java.util.ResourceBundle;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;

public class ContractTableController implements Initializable {
	
	
	@FXML
	private Button HOME_BTN;
	@FXML
	private Button Taxes_btn;
	@FXML
	private Button logOut_btn;
	@FXML
	private AnchorPane AddButton;
	@FXML
	private TableView<Contract> TableView;
	@FXML
	private TableColumn<Contract,String> P_ID_Col;
	@FXML
	private TableColumn<Contract,String> E_ID_Col;
	@FXML
	private TableColumn<Contract,String> phonecol;
	@FXML
	private TableColumn<Contract,String> Currenycol;
	@FXML
	private TableColumn<Contract,String> CDate_col;
	@FXML
	private TableColumn<Contract,String> expContractcol;
	@FXML
	private TableColumn<Contract,String> Settlement_agreementCol;
	@FXML
	private TableColumn<Contract, String> dueDateCol;
	@FXML
	private TableColumn<Contract,String> paymentMehodeCol;
	@FXML
	private TableColumn<Contract,String> C_ID_Col;
	@FXML
	private TextField search_c;
	@FXML
	private TextField Curreny;
	@FXML
	private Button updatebtn;
	@FXML
	private Button clearbtn;
	@FXML
	private Button ADDbtnC;
	@FXML
	private Button deletebtn;
	@FXML
	private DatePicker exp_Date;
	@FXML
	private DatePicker C_Date;
	@FXML
	private DatePicker dueDate;
	@FXML
	private ComboBox<String> paymentMehode;
	@FXML
	private TextField Cid_text;
	@FXML
	private TextField Pid_text;
	@FXML
	private TextField Tid_text;
	@FXML
	private TextField Eid_text;
	@FXML
	private TextField Curreny13;

	private Parent root;
	
	ObservableList <Contract> listM;  
	ObservableList <Contract> dataList;
	
	int index = -1;
	Connection conn = null;
	ResultSet rs = null;
	PreparedStatement pst = null;

	// Event Listener on Button[#HOME_BTN].onAction
	@FXML
	public void HOME_BTN(ActionEvent event) throws IOException {
		
		FXMLLoader loader = new FXMLLoader(getClass().getResource("Main2.fxml"));
		Parent root = loader.load();
	    this.root = root;

	    Scene scene = new Scene(root);
	    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	    stage.setScene(scene);
	    stage.show();
	}
	// Event Listener on Button[#Taxes_btn].onAction
	@FXML
	public void Taxes(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#logOut_btn].onAction
	@FXML
	public void logout(ActionEvent event) throws IOException {
		
		FXMLLoader loader = new FXMLLoader(getClass().getResource("MainScene.fxml"));
	    Parent root = loader.load();
	    this.root = root;
	    
	    Scene scene = new Scene(root);
	    Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
	    stage.setScene(scene);
	    stage.show();
	}

	// Event Listener on TextField[#search_c].onAction
	@FXML
	public void SearchC(ActionEvent event) {
		
		

	}
	// Event Listener on TextField[#search_c].onKeyPressed
	@FXML
	void serchbtn() {
		P_ID_Col.setCellValueFactory(new PropertyValueFactory<Contract,String>("Pid"));
		E_ID_Col.setCellValueFactory(new PropertyValueFactory<Contract,String>("Eid"));
		Currenycol.setCellValueFactory(new PropertyValueFactory<Contract,String>("Curreny"));
		phonecol.setCellValueFactory(new PropertyValueFactory<Contract,String>("Tid"));
		CDate_col.setCellValueFactory(new PropertyValueFactory<Contract,String>("C_Date"));
		expContractcol.setCellValueFactory(new PropertyValueFactory<Contract,String>("exp_Date"));
		Settlement_agreementCol.setCellValueFactory(new PropertyValueFactory<Contract,String>("settiementAgreement"));
		dueDateCol.setCellValueFactory(new PropertyValueFactory<Contract,String>("dueDate"));
		paymentMehodeCol.setCellValueFactory(new PropertyValueFactory<Contract,String>("paymentnethode"));
		C_ID_Col.setCellValueFactory(new PropertyValueFactory<Contract,String>("Cid"));
        
        
        dataList = getDataContract();
        TableView.setItems(dataList);
        FilteredList<Contract> filteredData = new FilteredList<>(dataList, b -> true);  
        search_c.textProperty().addListener((observable, oldValue, newValue) -> {
        	
        	filteredData.setPredicate(person -> {
        		if (newValue == null || newValue.isEmpty()) {
        			return true;
        		}    
        		String lowerCaseFilter = newValue.toLowerCase();
    
        		if (person.getTid().toLowerCase().indexOf(lowerCaseFilter) != -1 ) {
        			return true; // Filter matches username
        		} else if (person.getCid().toLowerCase().indexOf(lowerCaseFilter) != -1) {
        			return true; // Filter matches password
        		}else if (person.getPaymentnethode().toLowerCase().indexOf(lowerCaseFilter) != -1) {
        			return true; // Filter matches password
        		}
        		else if (person.getCurreny().toLowerCase().indexOf(lowerCaseFilter) != -1)
        			return true;// Filter matches email
        		else if (person.getSettiementAgreement().toLowerCase().indexOf(lowerCaseFilter) != -1)
        			return true;// Filter matches email
        		else if (String.valueOf(person.getC_Date()).indexOf(lowerCaseFilter)!=-1)
        			return true;// Filter matches email
                                
        		else  
        			return false; // Does not match.
        		});
        	
       		});
        
        
        SortedList<Contract> sortedData = new SortedList<>(filteredData);  
       	sortedData.comparatorProperty().bind(TableView.comparatorProperty());  
       	TableView.setItems(sortedData);
    	}

	
	@FXML
	void getSelected (MouseEvent event){
	    index = TableView.getSelectionModel().getSelectedIndex();
	    if (index <= -1){
	    
	        return;
	    }
		
		Cid_text.setText(C_ID_Col.getCellData(index).toString());
		Pid_text.setText(P_ID_Col.getCellData(index).toString());
		Tid_text.setText(phonecol.getCellData(index).toString());
		Eid_text.setText(E_ID_Col.getCellData(index).toString());
		Curreny.setText(Currenycol.getCellData(index).toString());
		Curreny13.setText(Settlement_agreementCol.getCellData(index).toString());
		exp_Date.setValue(LocalDate.parse(expContractcol.getCellData(index).toString()));
        C_Date.setValue(LocalDate.parse(CDate_col.getCellData(index).toString()));
        dueDate.setValue(LocalDate.parse(dueDateCol.getCellData(index).toString()));
		paymentMehode.setValue(paymentMehodeCol.getCellData(index).toString());
	}
	// Event Listener on Button[#updatebtn].onAction
	@FXML
	public void updatebtnC(ActionEvent event) {
		try {
            conn = mysqlconnect.getConnection();
            String value1 = Cid_text.getText();
            String value2 = Pid_text.getText();
            String value3 = Tid_text.getText();
            String value4 = Eid_text.getText();
            String value5 = Curreny13.getText();
            String value6 = Curreny.getText();
            String value7 = exp_Date.getValue().toString();
            String value8 = C_Date.getValue().toString();
            String value9 = dueDate.getValue().toString();
            String value10 = paymentMehode.getValue();
            
            String sql = "UPDATE Contract SET CID = '" + value1 + "', pID = '" + value2 + "', eID = '" +
            	    value4 + "', TID = '" + value3 + "', currency = '" + value6 + "', Cdate = '" + value8 +
            	     "', expContract = '" + value7 + "', settlement_agreement = '" + value5 + "', dueDate = '" + value9 + "', paymentMehode = '" + value10 +
            	    "' WHERE CID = '" + value1 + "'";

            pst= conn.prepareStatement(sql);
            pst.execute();
            JOptionPane.showMessageDialog(null, "Update");
            updateTable();
          
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
	}
	// Event Listener on Button[#clearbtn].onAction
	@FXML
	public void clearbtnC(ActionEvent event) {
		updateTable();
		Cid_text.clear();
		Pid_text.clear();
		Tid_text.clear();
		Eid_text.clear();
		Curreny.clear();
		search_c.clear();
		Curreny13.clear();
		exp_Date.setValue(null);
        C_Date.setValue(null);
        dueDate.setValue(null);
		paymentMehode.setValue(null);
	}
	// Event Listener on Button[#ADDbtnC].onAction
	@FXML
	public void ADDbtnContact(ActionEvent event) {
		conn = mysqlconnect.getConnection();
		String sql = "insert into Contract (CID, pID, eID, TID, currency, Cdate, expContract, settlement_agreement, dueDate, paymentMehode)values(?,?,?,?,?,?,?,?,?,?) ";
		
		try {
			//The index passed as the first argument corresponds to the position of the question mark in the SQL query.
			pst= conn.prepareStatement(sql);
			pst.setString(1,Cid_text.getText());
			pst.setString(2,Pid_text.getText());
			pst.setString(3,Eid_text.getText());
			pst.setString(4,Tid_text.getText());
			pst.setString(5,Curreny.getText());
			pst.setString(6,C_Date.getValue().toString());
			pst.setString(7,exp_Date.getValue().toString());
			pst.setString(8,Curreny13.getText());
			pst.setString(9,dueDate.getValue().toString());
			pst.setString(10,paymentMehode.getValue());
			
			pst.executeUpdate();  //pst.executeUpdate() method is called to execute the SQL statement to insert a new row into your MySQL database table based on the values you provided.
			

	        // Refresh the TableView after adding the user
	       // listM = mysqlconnect.getDataTenant();     
	        listM= getDataContract();                ////getDataTenant() method retrieves the updated data from the database.
			TableView.setItems(listM);
			
			JOptionPane.showMessageDialog(null, "Contract Added successfully");

		} catch (Exception e) {
			
			 JOptionPane.showMessageDialog(null, e);
		}
	}
	// Event Listener on Button[#deletebtn].onAction
	@FXML
	public void deletebtnC(ActionEvent event) {
		conn = mysqlconnect.getConnection();
	    String sql = "delete from Contract where CID = ?";
	        try {
	            pst = conn.prepareStatement(sql);
	            pst.setString(1, Cid_text.getText());
	            pst.executeUpdate();
	            JOptionPane.showMessageDialog(null, "Delete");
	            updateTable();
	        } catch (Exception e) {
	            JOptionPane.showMessageDialog(null, e);
	        }
	}
	// Event Listener on DatePicker[#exp_Date].onAction
	@FXML
	public void expDate(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on DatePicker[#C_Date].onAction
	@FXML
	public void cDate(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on DatePicker[#dueDate].onAction
	@FXML
	public void dueDateD(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on ComboBox[#paymentMehode].onAction
	@FXML
	public void paymentMehodeB(ActionEvent event) {
		// TODO Autogenerated
	}
	public static ObservableList<Contract> getDataContract(){
		Connection conn = mysqlconnect.getConnection();
		ObservableList<Contract> list = FXCollections.observableArrayList();  //This list will store the retrieved data
		try {
			PreparedStatement ps =  conn.prepareStatement("select * from Contract");  //Prepares a SQL statement using a PreparedStatement object
            ResultSet rs = ps.executeQuery();      // Executes the SQL statement using executeQuery(), which returns a ResultSet containing the retrieved data.
            
            //In the rs.getString() method, you need to specify the column name in workBench or the column index from which you want to retrieve the data.
            
            while(rs.next()){
                list.add(new Contract(rs.getString("CID"),rs.getString("pID"),rs.getString("eID"),rs.getString("TID"),rs.getString("currency"),rs.getString("Cdate"),rs.getString("expContract"),rs.getString("dueDate"),rs.getString("settlement_agreement"),rs.getString("paymentMehode")));

                //extracts the values for each column of a row.
            }
           
			
		 } catch (Exception e) {
		        e.printStackTrace();
		    } finally {
		        try {
		            if (conn != null) {
		                conn.close();
		            }
		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		    }
		return list;
	}
	public void updateTable() {
		

		P_ID_Col.setCellValueFactory(new PropertyValueFactory<Contract,String>("Pid"));
		E_ID_Col.setCellValueFactory(new PropertyValueFactory<Contract,String>("Eid"));
		Currenycol.setCellValueFactory(new PropertyValueFactory<Contract,String>("Curreny"));
		phonecol.setCellValueFactory(new PropertyValueFactory<Contract,String>("Tid"));
		CDate_col.setCellValueFactory(new PropertyValueFactory<Contract,String>("C_Date"));
		expContractcol.setCellValueFactory(new PropertyValueFactory<Contract,String>("exp_Date"));
		Settlement_agreementCol.setCellValueFactory(new PropertyValueFactory<Contract,String>("settiementAgreement"));
		dueDateCol.setCellValueFactory(new PropertyValueFactory<Contract,String>("dueDate"));
		paymentMehodeCol.setCellValueFactory(new PropertyValueFactory<Contract,String>("paymentnethode"));
		C_ID_Col.setCellValueFactory(new PropertyValueFactory<Contract,String>("Cid"));
        
		//Note that the strings inside PropertyValueFactory are case-sensitive and must match the property names exactly as they are defined in the Tenant class.
        
        listM = getDataContract();
        TableView.setItems(listM);
		
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		paymentMehode.setItems(FXCollections.observableArrayList("Credit Card", "Cash", "Check", "Bank Transfer"));
		updateTable();
		
	} 
}